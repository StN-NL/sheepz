package HammerDrop
import Assets
import ClosureTimers
import ConfigWeapons
import Fx2Entity
import Heightmap
import MyUnitEntity
import MyProjectile
import SheepEntity
import Utils


public class HammerDrop extends MyProjectile
  var isHammerLanded = false
  HammeredHorse horse
  
  construct(SheepEntity source, vec2 target)
    super(source, hammerDrop.minRadius, Abilities.stormBoltMissile)
    fx.eff..setScale(4)..setOrientation(PI/2, PI/2, PI/2)
    setPos(target.withZ(pos.getHeightMap() + 4000))
    let horsePos = target.getRandomPos(hammerDrop.maxRadius).withZ(target.getHeightMap())
    flashEffect(Abilities.polyMorphTarget, horsePos)
    horse = new HammeredHorse(source.owner, horsePos)

  override function update()
    super.update()
    if not isHammerLanded and pos.z < pos.getHeightMap() + 200
      isHammerLanded = true
      onGroundHit()
      
  override function onGroundHit()
    super.onGroundHit()
    vel.z = 0.
    gravity = 0.
    flashEffect(Abilities.thunderclapCaster, pos.toVec2(), 2)
    flashEffect(Objects.humanLargeDeathExplode, horse.getPos())
    horse.terminate()
    pos.addFireStacks(400)
    source.blastArea(pos, hammerDrop.minRadius, hammerDrop.maxRadius, hammerDrop.maxDamage)
    doAfter(3) ->
      terminate()

  override function setPhysics()


public class HammeredHorse extends Fx2Entity

  construct(player owner, vec3 pos)
    super(owner, pos, getRandomAngle(), Units.packHorse1)
    gravity = 0.
