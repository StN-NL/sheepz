package Projectile3
import HashSet
import Projectile
import ClosureForGroups

public interface OnHit3Listener
  function run(UnitEntity target)

public class Projectile3 extends Projectile
  private constant hitGroup = new HashSet<UnitEntity>
  
  private OnHit3Listener onHit3 = null
  var friendlyFire = false
  var maxHits = 1
  
  real distance = 0.

  construct(vec3 pos, real radius, player owner, angle xyAngle, string fxpath)
    super(pos, radius, owner, xyAngle, fxpath)
    gravity = defaultGravity

  function setPermanent()
    this.maxHits = INT_MAX

  function scaleVelXY(real scaling)
    vel.x = scaling * vel.x
    vel.y = scaling * vel.y

  function scaleVelZ(real scaling)
    vel.z = scaling * vel.z

  function onHit3D(OnHit3Listener listener)
    this.onHit3 = listener
    
  override function update()
    distance += vel.length()
    if onHit3 != null
      forUnitsInRange(pos.toVec2(), radius) u ->
        if not done and hitGroup.size() < maxHits
          checkHit3(u)
    if not done
      super.update()

  function checkHit3(unit u)
    let target = u.getEntity()
    if pos.distanceTo(target.pos) < radius
      if not hitGroup.has(target)
        if target.owner != owner or friendlyFire
          hit3(target)

  function hit3(UnitEntity target)
    hitGroup.add(target)
    onHit3.run(target)

  function removeHitUnit(UnitEntity e)
    hitGroup.remove(e)

  ondestroy
    destroy hitGroup
    if onHit3 != null
      destroy onHit3
