package Drop
import Arsenal
import Assets
import ClosureTimers
import ConfigWeapons
import Globals
import MyAssets
import PhysicsEntity
import Projectile
import Projectile3
import Utils

constant weaponDropModels = asList(Doodads.treasurePile0, Doodads.treasurePile1)
      
public function initDrops()
  doPeriodically(isSinglePlayer() ? 999 : 30) cb ->
    for _ in getPlayersIngame()
      dropRandomWeapon()

public function dropRandomWeapon()
  let pos = getRandomPosOnLand().withZ(1600)
  let path = weaponDropModels.getRandomElement()
  PingMinimapForForce(GetPlayersAll(), pos.x, pos.y, 5)
  if oneOutOf(10)
    SOUND_DROP_SUPPLIES.play()
  new DropEntity(pos, path) target ->
    let p = target.owner
    p.addRandomWeapon(weaponList)
    // print(p.getNameColored(true) + " " + PICKUP_WEAPON_MESSAGES.getRandomElement() + " (" + weapon.name + ")", 3)

public class DropEntity extends Projectile3
  use PhysicsModule

  effect parachute
  OnHit3Listener onPickup
  bool pickedUp = false

  construct(vec3 pos, string path, OnHit3Listener onPickup)
    super(pos, 175, DUMMY_PLAYER, getRandomAngle(), path)
    this.onPickup = onPickup
    parachute = addEffect(MyModels.parachute, pos)
    gravity = defaultGravity
    onHit3D() target ->
      pickup(target)
      
  function pickup(UnitEntity target)
    if not pickedUp
      pickedUp = true
      flashEffect(Abilities.polyMorphTarget, pos)
      onPickup.run(target)
      terminate()

  override function update()
    updateParachute()
    physicsUpdate(this)
    super.update()

  override function slowUpdate()
    if sleeps and not done
      super.update()

  function updateParachute()
    parachute.setPos(pos)
    if flying and vel.z < -10
      vel.z = -10

  override function onGroundHit()
    sleeps = true
    parachute.setAlpha(0)
  
  ondestroy
    destroy onPickup
    fx.eff.setAlpha(0)
    parachute.destr()
