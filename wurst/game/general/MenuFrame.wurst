package MenuFrame
import Arsenal
import ClosureFrames
import ClosureKeyPresses
import ConfigGame
import ConfigWeapons
import FramehandleNames
import LinkedList
import MyAssets


public function updateMap(real centerX, real centerY, real sizeX, real sizeY, string tex)
  CENTER = vec2(GRID_L * centerX, GRID_L * centerY)
  let left = GRID_L * (centerX - sizeX / 2)
  let right = GRID_L * (centerX + sizeX / 2)
  let bottom = GRID_L * (centerY - sizeY / 2)
  let top = GRID_L * (centerY + sizeY / 2)
  
  MAP_BOTTOMLEFT = vec2(left, bottom)
  MAP_TOPRIGHT = vec2(right, top)
  MAP_TOPLEFT = vec2(left, top)
  MAP_BOTTOMRIGHT = vec2(right, bottom)

  BlzChangeMinimapTerrainTex(tex)
  setCameraBounds(MAP_BOTTOMLEFT, MAP_TOPRIGHT, MAP_TOPLEFT, MAP_BOTTOMRIGHT)
  setCameraPosition(CENTER)
  

interface OnGameStart
  function run()

interface OnSliderValueChangeReal
  function update(real value)

interface OnSliderValueChangeInt
  function update(int value)


function isPrivileged() returns boolean
  return EventData.getTriggerPlayer() == players[0] or IS_ANARCHY


abstract class Slider
  var prefix = ""
  var suffix = ""
  framehandle slider
  framehandle sliderLabel

  construct(framehandle parent, framehandle relative)
    slider = createFrame("EscMenuSliderTemplate", parent, 0, 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, relative, FRAMEPOINT_BOTTOMLEFT, 0, -0.005)
    ..setWidth(0.12)
    ..onSliderValueChange() -> 
      getSliderValueAndCallback()
      
    sliderLabel = createFrame("EscMenuLabelTextTemplate", parent, 0, 2)
    ..setPoint(FRAMEPOINT_LEFT, slider, FRAMEPOINT_RIGHT, 0.01, 0)

  abstract protected function getSliderValueAndCallback()

  function setPrefix(string prefix)
    this.prefix = prefix

  function setSuffix(string suffix)
    this.suffix = suffix

  function setPoint(framepointtype point, framehandle relative, framepointtype relativePoint, real offsetX, real offsetY)
    slider.setPoint(point, relative, relativePoint, offsetX, offsetY)

  function setWidth(real width)
    slider.setWidth(width)

  function enable()
    slider.enable()
    sliderLabel.enable()

  function disable()
    slider.disable()
    sliderLabel.disable()


class SliderInt extends Slider
  OnSliderValueChangeInt cb

  construct(framehandle parent, framehandle relative)
    super(parent, relative)

  function onSliderValueChange(OnSliderValueChangeInt cb)
    this.cb = cb
    getSliderValueAndCallback()

  function setData(int value, int minValue, int maxValue, int stepSize)
    slider.setMinMax(minValue.toReal(), maxValue.toReal())
    slider.setValue(value.toReal())
    slider.setStepSize(stepSize.toReal())
      
  override protected function getSliderValueAndCallback()
    if isPrivileged()
      let value = BlzGetTriggerFrameValue()
      cb.update(value.toInt())
      sliderLabel.setText(prefix + value.toInt().toString() + suffix)


class SliderReal extends Slider
  OnSliderValueChangeReal cb

  construct(framehandle parent, framehandle relative)
    super(parent, relative)

  function onSliderValueChange(OnSliderValueChangeReal cb)
    this.cb = cb
    getSliderValueAndCallback()

  function setData(real value, real minValue, real maxValue, real stepSize)
    slider.setMinMax(minValue, maxValue)
    slider.setValue(value)
    slider.setStepSize(stepSize)
      
  override protected function getSliderValueAndCallback()
    if isPrivileged()
      let value = BlzGetTriggerFrameValue()
      cb.update(value)
      sliderLabel.setText(prefix + value.toString(1) + suffix)


class WeaponFrame
  framehandle icon
  SliderInt rarity
  SliderInt amount
  SliderReal maxDamage
  SliderReal radius
  SliderReal explosionRadius
  SliderReal maxChannelTime
  SliderReal minRadius
  SliderReal maxRadius

  construct(WeaponDefinition def, framehandle parent, real offsetX, real offsetY)
    icon = createFrame(FramehandleTypeNames.backdrop, "", parent, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, offsetX, offsetY)
    ..setSize(0.04, 0.04)
    ..setTexture(def.icon, 0, true)

    rarity = new SliderInt(parent, icon)
    ..setPoint(FRAMEPOINT_TOPLEFT, icon, FRAMEPOINT_TOPRIGHT, 0.01, 0)
    ..setWidth(0.09)
    ..setData(def.rarity, 0, 100, 1)
    ..setPrefix("Rarity: ")
    ..onSliderValueChange() (int value) ->
      def.setRarity(value)

    amount = new SliderInt(parent, rarity.slider)
    ..setWidth(0.09)
    ..setData(def.amount, 0, 100, 1)
    ..setPrefix("Starting amount: ")
    ..onSliderValueChange() (int value) ->
      def.setAmount(value)

    var lastSlider = amount.slider

    if def.hasDuration()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.duration, 0, 30, 1)
      ..setPrefix("Duration: ")
      ..onSliderValueChange() (real value) ->
        def.setDuration(value)

      lastSlider = slider.slider

    if def.hasDelay()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.delay, 0, 10, 1)
      ..setPrefix("Delay: ")
      ..onSliderValueChange() (real value) ->
        def.setDelay(value)

      lastSlider = slider.slider

    if def.hasMaxDistance()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.maxDistance, 100, 2000, 25)
      ..setPrefix("Max Distance: ")
      ..onSliderValueChange() (real value) ->
        def.setMaxDistance(value)

      lastSlider = slider.slider

    if def.hasMaxDamage()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.maxDamage, 0, 100, 5)
      ..setPrefix("Max Damage: ")
      ..onSliderValueChange() (real value) ->
        def.setMaxDamage(value)

      lastSlider = slider.slider

    if def.hasMinRadius()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.minRadius, 5, 250, 5)
      ..setPrefix("Min Radius: ")
      ..onSliderValueChange() (real value) ->
        def.setMinRadius(value)

      lastSlider = slider.slider

    if def.hasMaxRadius()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.maxRadius, 5, 400, 5)
      ..setPrefix("Max Radius: ")
      ..onSliderValueChange() (real value) ->
        def.setMaxRadius(value)

      lastSlider = slider.slider

    if def.hasMaxKnockBack()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.maxKnockBack, 0, 200, 5)
      ..setPrefix("Max Knockback: ")
      ..onSliderValueChange() (real value) ->
        def.setMaxKnockBack(value)

      lastSlider = slider.slider

    if def.hasNumberOfWaves()
      let slider = new SliderInt(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.numberOfWaves, 5, 50, 10)
      ..setPrefix("Number of Waves: ")
      ..onSliderValueChange() (int value) ->
        def.setNumberOfWaves(value)

      lastSlider = slider.slider

    if def.hasThickness()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.thickness, 5, 200, 10)
      ..setPrefix("Thickness: ")
      ..onSliderValueChange() (real value) ->
        def.setThickness(value)

      lastSlider = slider.slider

    if def.hasShards()
      let slider = new SliderInt(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.shards, 0, 100, 2)
      ..setPrefix("Shards: ")
      ..onSliderValueChange() (int value) ->
        def.setShards(value)

      lastSlider = slider.slider

    if def.hasShardsPower()
      let slider = new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.shardsPower, 0, 20, 1)
      ..setPrefix("Shards Power: ")
      ..onSliderValueChange() (real value) ->
        def.setShardsPower(value)

      lastSlider = slider.slider

    if def.hasShardsMaxDamage()
      new SliderReal(parent, lastSlider)
      ..setWidth(0.09)
      ..setData(def.shardsMaxDamage, 0, 100, 5)
      ..setPrefix("Shards Damage: ")
      ..onSliderValueChange() (real value) ->
        def.setShardsMaxDamage(value)


public class MenuSetup
  private boolean hasGameMode = false
  private boolean hasMapSelection = false
  private boolean hasStarted = false
  private int index = 0

  private framehandle startGameButton
  private framehandle array[8] weaponsPageList
  private framehandle gameModeTimedCheckBox
  private SliderReal gameModeTimedDuration
  private framehandle gameModeSurvivalCheckBox
  private SliderInt gameModeSurvivalLives
  private framehandle mapTropicalIslandCheckBox
  private framehandle mapTheArenaCheckBox

  construct(OnGameStart onGameStart)
    // Load the necessary frames
    BlzLoadTOCFile("war3mapImported\\templates.toc")

    // Create a container frame
    let window = createFrame("FRAME", "", GAME_UI, "", 0)
    
    // Create a box as child of the container
    let boxFrame = createFrame(FramehandleTypeNames.backdrop, "", window, FramehandleDefaultNames.escMenuBackdrop, 0)
    ..setSize(0.6, 0.4)
    ..setPoint(FRAMEPOINT_CENTER, GAME_UI, FRAMEPOINT_CENTER, 0, 0.065)

    getFrame(FramehandleDefaultNames.resourceBarUpkeepText)
    ..setText("Settings (" + "F8".color(COLOR_GOLD) + ")")

    onKeyPress(OSKEY_F8) ->
      if hasStarted and not window.isVisible()
        PauseGame(true)
        window.setVisible(true)
        SOUND_BUTTON_CLICK.play()
    
    startGameButton = createFrame(FramehandleTypeNames.gluetextbutton, "", boxFrame, FramehandleNames.scriptDialogButton, 0)
    ..setPoint(FRAMEPOINT_BOTTOMRIGHT, boxFrame, FRAMEPOINT_BOTTOMRIGHT, -0.02, 0.02)
    ..setSize(0.11, 0.04)
    ..setText("Start")
    ..disable()
    ..onClick() ->
      if hasStarted
        PauseGame(false)
        window.setVisible(false)
        SOUND_BUTTON_CLICK.play()
      else if hasGameMode
        startGameButton.setText("Close")
        gameModeSurvivalCheckBox.disable()
        gameModeSurvivalLives.disable()
        gameModeTimedCheckBox.disable()
        gameModeTimedDuration.disable()
        mapTropicalIslandCheckBox.disable()
        mapTheArenaCheckBox.disable()
        window.setVisible(false)
        SOUND_BUTTON_CLICK.play()
        onGameStart.run()
        hasStarted = true

    // Page containers used for hiding and showing pages
    let gamePage = createFrame("FRAME", "", boxFrame, "", 0)
    ..setSize(0.55, 0.3)
    ..setPoint(FRAMEPOINT_TOP, boxFrame, FRAMEPOINT_TOP, 0, -0.03)
    ..setVisible(true)

    let physicsPage = createFrame("FRAME", "", boxFrame, "", 0)
    ..setSize(0.55, 0.3)
    ..setPoint(FRAMEPOINT_TOP, boxFrame, FRAMEPOINT_TOP, 0, -0.03)
    ..setVisible(false)

    let weaponsPage = createFrame("FRAME", "", boxFrame, "", 0)
    ..setSize(0.55, 0.3)
    ..setPoint(FRAMEPOINT_TOP, boxFrame, FRAMEPOINT_TOP, 0, -0.03)
    ..setVisible(false)

    // Page buttons for swapping pages
    let gameButton = createFrame(FramehandleTypeNames.gluetextbutton, "", boxFrame, FramehandleNames.scriptDialogButton, 0)
    ..setPoint(FRAMEPOINT_BOTTOMLEFT, boxFrame, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02)
    ..setSize(0.11, 0.04)
    ..setText("Basics")
    ..onClick() ->
      gamePage.setVisible(true)
      physicsPage.setVisible(false)
      weaponsPage.setVisible(false)
      SOUND_BUTTON_CLICK.play()

    let physicsButton = createFrame(FramehandleTypeNames.gluetextbutton, "", boxFrame, FramehandleNames.scriptDialogButton, 0)
    ..setPoint(FRAMEPOINT_LEFT, gameButton, FRAMEPOINT_RIGHT)
    ..setSize(0.11, 0.04)
    ..setText("Physics")
    ..onClick() ->
      gamePage.setVisible(false)
      physicsPage.setVisible(true)
      weaponsPage.setVisible(false)
      SOUND_BUTTON_CLICK.play()

    let weaponsButton = createFrame(FramehandleTypeNames.gluetextbutton, "", boxFrame, FramehandleNames.scriptDialogButton, 0)
    ..setPoint(FRAMEPOINT_LEFT, physicsButton, FRAMEPOINT_RIGHT)
    ..setSize(0.11, 0.04)
    ..setText("Weapons")
    ..onClick() ->
      gamePage.setVisible(false)
      physicsPage.setVisible(false)
      weaponsPage.setVisible(true)
      SOUND_BUTTON_CLICK.play()

    // Weapon pages
    for i = 0 to weaponsPageList.length - 1
      weaponsPageList[i] = createFrame("FRAME", "", weaponsPage, "", 0)
      ..setSize(0.55, 0.3)
      ..setPoint(FRAMEPOINT_TOP, weaponsPage, FRAMEPOINT_TOP)
      ..setVisible(i == 0)

      let weaponsButtonBack = createFrame(FramehandleTypeNames.gluetextbutton, "", weaponsPage, FramehandleNames.scriptDialogButton, 0)
      ..setPoint(FRAMEPOINT_LEFT, weaponsButton, FRAMEPOINT_RIGHT)
      ..setSize(0.04, 0.04)
      ..setText("<")
      ..onClick() ->
        weaponsPageList[index].setVisible(false)
        if index == 0
          index = weaponsPageList.length - 1
        else
          index -= 1

        weaponsPageList[index].setVisible(true)
        SOUND_BUTTON_CLICK.play()

      createFrame(FramehandleTypeNames.gluetextbutton, "", weaponsPage, FramehandleNames.scriptDialogButton, 0)
      ..setPoint(FRAMEPOINT_LEFT, weaponsButtonBack, FRAMEPOINT_RIGHT)
      ..setSize(0.04, 0.04)
      ..setText(">")
      ..onClick() ->
        weaponsPageList[index].setVisible(false)
        if index == weaponsPageList.length - 1
          index = 0
        else
          index += 1

        weaponsPageList[index].setVisible(true)
        SOUND_BUTTON_CLICK.play()

    // <<<<<<<<<< <<<<<<<<<< --------- >>>>>>>>>> >>>>>>>>>>
    // <<<<<<<<<< <<<<<<<<<< Page Game >>>>>>>>>> >>>>>>>>>>
    // <<<<<<<<<< <<<<<<<<<< --------- >>>>>>>>>> >>>>>>>>>>

    let gameModeTitle = createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, gamePage, FRAMEPOINT_TOPLEFT)
    ..setScale(1.5)
    ..setText("Game Mode")
    ..setTextColor(COLOR_GOLD)

    // <<<<<<<<<< <<<<<<<<<< Against the Clock >>>>>>>>>> >>>>>>>>>>
    
    gameModeTimedCheckBox = createFrame(FramehandleNames.questCheckBox2, gamePage, 0, 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, gameModeTitle, FRAMEPOINT_TOPLEFT, 0, -0.025)
    ..setSize(0.025, 0.025)
    ..onCheckboxCheck(() -> setGameModeCheck(gameModeTimedCheckBox))
    ..onCheckboxUncheck(() -> setGameModeUncheck())

    createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_LEFT, gameModeTimedCheckBox, FRAMEPOINT_RIGHT, 0.005, 0)
    ..setScale(1.4)
    ..setText("Against the Clock")

    gameModeTimedDuration = new SliderReal(gamePage, gameModeTimedCheckBox)
    ..setData(GAME_DURATION, 2, 60, 2)
    ..setSuffix(" min")
    ..onSliderValueChange() (real value) ->
      GAME_DURATION = value

    let gameModeTimedDescription = createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, gameModeTimedDuration.slider, FRAMEPOINT_BOTTOMLEFT, 0, -0.010)
    ..setScale(1.1)
    ..setSize(0.22, 0.02)
    ..setText("The player with the most points after a set duration wins the game.")

    // <<<<<<<<<< <<<<<<<<<< Last Sheep Standing >>>>>>>>>> >>>>>>>>>>

    gameModeSurvivalCheckBox = createFrame(FramehandleNames.questCheckBox2, gamePage, 0, 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, gameModeTimedDescription, FRAMEPOINT_TOPLEFT, 0, -0.025)
    ..setSize(0.025, 0.025)
    ..onCheckboxCheck(() -> setGameModeCheck(gameModeSurvivalCheckBox))
    ..onCheckboxUncheck(() -> setGameModeUncheck())

    createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_LEFT, gameModeSurvivalCheckBox, FRAMEPOINT_RIGHT, 0.005, 0)
    ..setScale(1.4)
    ..setText("Last Sheep Standing")

    gameModeSurvivalLives = new SliderInt(gamePage, gameModeSurvivalCheckBox)
    ..setData(SHEEP_MAX_LIVES, 1, 10, 1)
    ..setSuffix(" lives")
    ..onSliderValueChange() (int value) ->
      SHEEP_MAX_LIVES = value

    let gameModeSurvivalDescription = createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, gameModeSurvivalLives.slider, FRAMEPOINT_BOTTOMLEFT, 0, -0.01)
    ..setScale(1.1)
    ..setSize(0.22, 0.02)
    ..setText("The player with the most points after only one sheep is left wins the game.")

    // <<<<<<<<<< <<<<<<<<<< Miscellaneous >>>>>>>>>> >>>>>>>>>>
    
    let anarchyTitle = createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, gameModeSurvivalDescription, FRAMEPOINT_BOTTOMLEFT, 0, -0.02)
    ..setScale(1.5)
    ..setText("Miscellaneous")
    ..setTextColor(COLOR_GOLD)

    let anarchyCheckBox = createFrame(FramehandleNames.questCheckBox2, gamePage, 0, 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, anarchyTitle, FRAMEPOINT_TOPLEFT, 0, -0.025)
    ..setSize(0.025, 0.025)
    ..onCheckboxCheck(() -> setIsAnarchyCheck())
    ..onCheckboxUncheck(() -> setIsAnarchyUncheck())

    createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_LEFT, anarchyCheckBox, FRAMEPOINT_RIGHT, 0.005, 0)
    ..setScale(1.4)
    ..setText("Proclaim Anarchy")

    createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, anarchyCheckBox, FRAMEPOINT_BOTTOMLEFT, 0, -0.007)
    ..setScale(1.1)
    ..setSize(0.22, 0.02)
    ..setText("All players can change settings!")

    // <<<<<<<<<< <<<<<<<<<< Arsenal >>>>>>>>>> >>>>>>>>>>

    let arsenalTitle = createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_TOPRIGHT, gamePage, FRAMEPOINT_TOPRIGHT, -0.15, 0)
    ..setScale(1.5)
    ..setText("Arsenal")
    ..setTextColor(COLOR_GOLD)

    let arsenalCooldown = new SliderReal(gamePage, arsenalTitle)
    ..setData(ARSENAL_COOLDOWN, 0.1, 10, 0.1)
    ..setPrefix("Weapon Cooldown: ")
    ..onSliderValueChange() (real value) ->
      ARSENAL_COOLDOWN = value

    let arsenalLimit = new SliderInt(gamePage, arsenalCooldown.slider)
    ..setData(ARSENAL_LIMIT, 1, 8, 1)
    ..setPrefix("Weapon Limit: ")
    ..onSliderValueChange() (int value) ->
      ARSENAL_LIMIT = value

    let arsenalMaxStacks = new SliderInt(gamePage, arsenalLimit.slider)
    ..setData(ARSENAL_MAX_STACKS, 1, 100, 5)
    ..setPrefix("Max Stacks: ")
    ..onSliderValueChange() (int value) ->
      ARSENAL_MAX_STACKS = value

    let arsenalDraftStart = new SliderInt(gamePage, arsenalMaxStacks.slider)
    ..setData(ARSENAL_DRAFT_START, 0, 100, 1)
    ..setPrefix("Starting draft: ")
    ..onSliderValueChange() (int value) ->
      ARSENAL_DRAFT_START = value

    let arsenalDraftRate = new SliderReal(gamePage, arsenalDraftStart.slider)
    ..setData(ARSENAL_DRAFT_INTERVAL, 1, 30, 1)
    ..setPrefix("Draft rate: ")
    ..onSliderValueChange() (real value) -> 
      ARSENAL_DRAFT_INTERVAL = value

    // <<<<<<<<<< <<<<<<<<<< Map Selection >>>>>>>>>> >>>>>>>>>>

    let mapSelectionTitle = createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, arsenalDraftRate.slider, FRAMEPOINT_BOTTOMLEFT, 0, -0.02)
    ..setScale(1.5)
    ..setText("Map Selection")
    ..setTextColor(COLOR_GOLD)

    mapTropicalIslandCheckBox = createFrame(FramehandleNames.questCheckBox2, gamePage, 0, 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, mapSelectionTitle, FRAMEPOINT_TOPLEFT, 0, -0.02)
    ..setSize(0.025, 0.025)
    ..onCheckboxCheck(() -> setMapSelectionCheck(mapTropicalIslandCheckBox))
    ..onCheckboxUncheck(() -> setMapSelectionUncheck())

    createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_LEFT, mapTropicalIslandCheckBox, FRAMEPOINT_RIGHT, 0.005, 0)
    ..setScale(1.4)
    ..setText("Tropical Island")

    mapTheArenaCheckBox = createFrame(FramehandleNames.questCheckBox2, gamePage, 0, 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, mapTropicalIslandCheckBox, FRAMEPOINT_BOTTOMLEFT)
    ..setSize(0.025, 0.025)
    ..onCheckboxCheck(() -> setMapSelectionCheck(mapTheArenaCheckBox))
    ..onCheckboxUncheck(() -> setMapSelectionUncheck())

    createFrame(FramehandleTypeNames.text, "", gamePage, "", 0)
    ..setPoint(FRAMEPOINT_LEFT, mapTheArenaCheckBox, FRAMEPOINT_RIGHT, 0.005, 0)
    ..setScale(1.4)
    ..setText("The Arena")

    // <<<<<<<<<< <<<<<<<<<< ------------ >>>>>>>>>> >>>>>>>>>>
    // <<<<<<<<<< <<<<<<<<<< Page Physics >>>>>>>>>> >>>>>>>>>>
    // <<<<<<<<<< <<<<<<<<<< ------------ >>>>>>>>>> >>>>>>>>>>

    // <<<<<<<<<< <<<<<<<<<< Sheep >>>>>>>>>> >>>>>>>>>>
    
    let sheepTitle = createFrame(FramehandleTypeNames.text, "", physicsPage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, physicsPage, FRAMEPOINT_TOPLEFT)
    ..setScale(1.5)
    ..setText("Sheep")
    ..setTextColor(COLOR_GOLD)

    let sheepMaxHp = new SliderReal(physicsPage, sheepTitle)
    ..setData(SHEEP_MAX_HP, 1, 500, 10)
    ..setPrefix("Hit Points: ")
    ..onSliderValueChange() (real value) -> 
      SHEEP_MAX_HP = value

    let sheepScalingValue = new SliderReal(physicsPage, sheepMaxHp.slider)
    ..setData(SHEEP_SCALING_VALUE, 1, 3, 0.1)
    ..setPrefix("Scaling Value: ")
    ..onSliderValueChange() (real value) -> 
      SHEEP_SCALING_VALUE = value

    let sheepMsNormal = new SliderReal(physicsPage, sheepScalingValue.slider)
    ..setData(SHEEP_MS_NORMAL, 0, 500, 10)
    ..setPrefix("MS Normal: ")
    ..onSliderValueChange() (real value) -> 
      SHEEP_MS_NORMAL = value

    let sheepMsDeepWater = new SliderReal(physicsPage, sheepMsNormal.slider)
    ..setData(SHEEP_MS_DEEP_WATER, 0, 500, 10)
    ..setPrefix("MS Deep Water: ")
    ..onSliderValueChange() (real value) -> 
      SHEEP_MS_DEEP_WATER = value

    let sheepMsFlying = new SliderReal(physicsPage, sheepMsDeepWater.slider)
    ..setData(SHEEP_MS_FLYING, 0, 500, 10)
    ..setPrefix("MS Flying: ")
    ..onSliderValueChange() (real value) -> 
      SHEEP_MS_FLYING = value

    let sheepMsJetPack = new SliderReal(physicsPage, sheepMsFlying.slider)
    ..setData(SHEEP_MS_JET_PACK, 0, 500, 10)
    ..setPrefix("MS Jet Pack: ")
    ..onSliderValueChange() (real value) -> 
      SHEEP_MS_JET_PACK = value

    let sheepGraveDuration = new SliderReal(physicsPage, sheepMsJetPack.slider)
    ..setData(SHEEP_GRAVE_DURATION, 0, 240, 10)
    ..setPrefix("Grave Duration: ")
    ..onSliderValueChange() (real value) -> 
      SHEEP_GRAVE_DURATION = value

    let deltaOxygen = new SliderReal(physicsPage, sheepGraveDuration.slider)
    ..setData(DELTA_OXYGEN, 0, 10, 0.1)
    ..setPrefix("Oxygen Loss Factor: ")
    ..onSliderValueChange() (real value) ->
      DELTA_OXYGEN = value

    let jumpMaxHeight = new SliderReal(physicsPage, deltaOxygen.slider)
    ..setData(JUMP_MAX_HEIGHT, 0, 2000, 50)
    ..setPrefix("Jump Max Height: ")
    ..onSliderValueChange() (real value) ->
      JUMP_MAX_HEIGHT = value

    let jetPackMaxHeight = new SliderReal(physicsPage, jumpMaxHeight.slider)
    ..setData(JET_PACK_MAX_HEIGHT, 0, 2000, 50)
    ..setPrefix("Jet Pack Max Height: ")
    ..onSliderValueChange() (real value) ->
      JET_PACK_MAX_HEIGHT = value

    let jetPackCooldown = new SliderReal(physicsPage, jetPackMaxHeight.slider)
    ..setData(JET_PACK_COOLDOWN, 0, 120, 5)
    ..setPrefix("Jet Pack Cooldown: ")
    ..onSliderValueChange() (real value) ->
      JET_PACK_COOLDOWN = value

    let jetPackDuration = new SliderReal(physicsPage, jetPackCooldown.slider)
    ..setData(JET_PACK_DURATION, 0, 10, 0.5)
    ..setPrefix("Jet Pack Duration: ")
    ..onSliderValueChange() (real value) ->
      JET_PACK_DURATION = value

    let parachuteCooldown = new SliderReal(physicsPage, jetPackDuration.slider)
    ..setData(PARACHUTE_COOLDOWN, 0, 120, 5)
    ..setPrefix("Parachute Cooldown: ")
    ..onSliderValueChange() (real value) ->
      PARACHUTE_COOLDOWN = value

    new SliderReal(physicsPage, parachuteCooldown.slider)
    ..setData(TICKLE_KNOCK_BACK, 0, 100, 5)
    ..setPrefix("Tickle Knockback: ")
    ..onSliderValueChange() (real value) ->
      TICKLE_KNOCK_BACK = value

    // <<<<<<<<<< <<<<<<<<<< Knockback >>>>>>>>>> >>>>>>>>>>
    
    let knockBackTitle = createFrame(FramehandleTypeNames.text, "", physicsPage, "", 0)
    ..setPoint(FRAMEPOINT_TOPRIGHT, physicsPage, FRAMEPOINT_TOPRIGHT, -0.13, 0)
    ..setScale(1.5)
    ..setText("Knockback")
    ..setTextColor(COLOR_GOLD)

    let knockbackFactorXY = new SliderReal(physicsPage, knockBackTitle)
    ..setData(KNOCKBACK_FACTOR_XY, 0, 10, 0.1)
    ..setPrefix("Factor XY: ")
    ..onSliderValueChange() (real value) ->
      KNOCKBACK_FACTOR_XY = value
 
    let knockbackFactorZ = new SliderReal(physicsPage, knockbackFactorXY.slider)
    ..setData(KNOCKBACK_FACTOR_Z, 0, 10, 0.1)
    ..setPrefix("Factor Z: ")
    ..onSliderValueChange() (real value) ->
      KNOCKBACK_FACTOR_Z = value

    // <<<<<<<<<< <<<<<<<<<< Fall Damage >>>>>>>>>> >>>>>>>>>>
    
    let fallDamageTitle = createFrame(FramehandleTypeNames.text, "", physicsPage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, knockbackFactorZ.slider, FRAMEPOINT_BOTTOMLEFT, 0, -0.01)
    ..setScale(1.5)
    ..setText("Fall Damage")
    ..setTextColor(COLOR_GOLD)

    let fallDamageMinVelZ = new SliderReal(physicsPage, fallDamageTitle)
    ..setData(FALL_DAMAGE_MIN_VEL_Z, 0, 100, 1)
    ..setPrefix("Min Velocity: ")
    ..onSliderValueChange() (real value) ->
      FALL_DAMAGE_MIN_VEL_Z = value

    let fallDamageRadius = new SliderReal(physicsPage, fallDamageMinVelZ.slider)
    ..setData(FALL_DAMAGE_RADIUS, 0, 400, 10)
    ..setPrefix("Damage Radius: ")
    ..onSliderValueChange() (real value) ->
      FALL_DAMAGE_RADIUS = value

    let fallDamageDamageFactor = new SliderReal(physicsPage, fallDamageRadius.slider)
    ..setData(FALL_DAMAGE_DAMAGE_FACTOR, 0, 50, 0.1)
    ..setPrefix("Damage Factor: ")
    ..onSliderValueChange() (real value) ->
      FALL_DAMAGE_DAMAGE_FACTOR = value

    let fallDamageKnockbackFactor = new SliderReal(physicsPage, fallDamageDamageFactor.slider)
    ..setData(FALL_DAMAGE_KNOCKBACK_FACTOR, 0, 50, 1)
    ..setPrefix("Knockback Factor: ")
    ..onSliderValueChange() (real value) ->
      FALL_DAMAGE_KNOCKBACK_FACTOR = value

    // <<<<<<<<<< <<<<<<<<<< Projectiles >>>>>>>>>> >>>>>>>>>>
    
    let projectileTitle = createFrame(FramehandleTypeNames.text, "", physicsPage, "", 0)
    ..setPoint(FRAMEPOINT_TOPLEFT, fallDamageKnockbackFactor.slider, FRAMEPOINT_BOTTOMLEFT, 0, -0.01)
    ..setScale(1.5)
    ..setText("Projectiles")
    ..setTextColor(COLOR_GOLD)

    let projectileAirFriction = new SliderReal(physicsPage, projectileTitle)
    ..setData(PROJECTILE_AIR_FRICTION, 0, 10, 0.1)
    ..setPrefix("Air Friction: ")
    ..onSliderValueChange() (real value) ->
      PROJECTILE_AIR_FRICTION = value

    let projectileDefaultScale = new SliderReal(physicsPage, projectileAirFriction.slider)
    ..setData(PROJECTILE_DEFAULT_SCALE, 0, 5, 0.1)
    ..setPrefix("Default Scale: ")
    ..onSliderValueChange() (real value) ->
      PROJECTILE_DEFAULT_SCALE = value

    let projectileBasePower = new SliderReal(physicsPage, projectileDefaultScale.slider)
    ..setData(PROJECTILE_BASE_POWER, 0, 20, 1)
    ..setPrefix("Base Power: ")
    ..onSliderValueChange() (real value) ->
      PROJECTILE_BASE_POWER = value

    let projectilePowerFactor = new SliderReal(physicsPage, projectileBasePower.slider)
    ..setData(PROJECTILE_POWER_FACTOR, 0, 30, 1)
    ..setPrefix("Power Factor: ")
    ..onSliderValueChange() (real value) ->
      PROJECTILE_POWER_FACTOR = value

    new SliderReal(physicsPage, projectilePowerFactor.slider)
    ..setData(PROJECTILE_FACTOR_Z, 0, 10, 0.1)
    ..setPrefix("Factor Z: ")
    ..onSliderValueChange() (real value) ->
      PROJECTILE_FACTOR_Z = value

    // <<<<<<<<<< <<<<<<<<<< ------------ >>>>>>>>>> >>>>>>>>>>
    // <<<<<<<<<< <<<<<<<<<< Page Weapons >>>>>>>>>> >>>>>>>>>>
    // <<<<<<<<<< <<<<<<<<<< ------------ >>>>>>>>>> >>>>>>>>>>

    let weaponLeft = 0.
    let weaponRight = 0.29
    let weaponTop = 0.
    let weaponBottom = -0.17

    var count = 0
    for weapon in weaponList
      let page = count div 4
      if count.moduloInt(4) == 0
        new WeaponFrame(weapon, weaponsPageList[page], weaponLeft, weaponTop)
      else if (count + 2).moduloInt(4) == 0
        new WeaponFrame(weapon, weaponsPageList[page], weaponLeft, weaponBottom)
      else if (count + 3).moduloInt(4) == 0
        new WeaponFrame(weapon, weaponsPageList[page], weaponRight, weaponTop)
      else if (count + 1).moduloInt(4) == 0
        new WeaponFrame(weapon, weaponsPageList[page], weaponRight, weaponBottom)

      count += 1

  function updateStartGameButton()
    if hasGameMode and hasMapSelection
      startGameButton.enable()
    else
      startGameButton.disable()

  function setGameModeCheck(framehandle checkBox)
    if not isPrivileged()
      return
    
    if checkBox == gameModeTimedCheckBox
      GAME_MODE = GameMode.TIMED
      hasGameMode = true
      updateStartGameButton()
      gameModeSurvivalCheckBox.disable()
      gameModeSurvivalLives.disable()
    if checkBox == gameModeSurvivalCheckBox
      GAME_MODE = GameMode.SURVIVAL
      hasGameMode = true
      updateStartGameButton()
      gameModeTimedCheckBox.disable()
      gameModeTimedDuration.disable()

  function setGameModeUncheck()
    if not isPrivileged()
      return
    
    hasGameMode = false
    updateStartGameButton()
    gameModeTimedCheckBox.enable()
    gameModeTimedDuration.enable()
    gameModeSurvivalCheckBox.enable()
    gameModeSurvivalLives.enable()

  function setIsAnarchyCheck()
    if not isPrivileged()
      return
    
    IS_ANARCHY = true
    
  function setIsAnarchyUncheck()
    if not isPrivileged()
      return
    
    IS_ANARCHY = false
    
  function setMapSelectionCheck(framehandle checkBox)
    if not isPrivileged()
      return
    
    if checkBox == mapTropicalIslandCheckBox
      MAP_SELECTION = MapSelection.TROPICAL_ISLAND
      hasMapSelection = true
      updateStartGameButton()
      updateMap(-8, 8, 12, 12, Minimaps.tropicalIsland)
      mapTheArenaCheckBox.disable()
    if checkBox == mapTheArenaCheckBox
      MAP_SELECTION = MapSelection.THE_ARENA
      hasMapSelection = true
      updateStartGameButton()
      updateMap(9, 9, 10, 10, Minimaps.theArena)
      mapTropicalIslandCheckBox.disable()

  function setMapSelectionUncheck()
    if not isPrivileged()
      return

    hasMapSelection = false
    updateStartGameButton()
    mapTropicalIslandCheckBox.enable()
    mapTheArenaCheckBox.enable()
