package Utils
import ClosureEvents
import ClosureTimers
import GameTimer
import HashSet
import Players

constant playersInGame = new LinkedList<player>

// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< PLAYER     >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>

public function getPlayersIngame() returns LinkedList<player>
  let pl = playersInGame.copy()
  nullTimer() ->
    destroy pl
  return pl

public function isSinglePlayer() returns bool
  return getPlayersIngame().size() == 1

public function getSinglePlayer() returns player
  return getPlayersIngame().getFirst()
  
public function unit.isNeutral() returns boolean
  return this.getOwner().isNeutral()
  
public function player.isNeutral() returns boolean
  return this == DUMMY_PLAYER or this == DUMMY_HOSTILE_PLAYER or this.getId() >= 22

// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< MATH       >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>

/** Roll the dice on a number between 0 and 1 */
public function roll(real val) returns boolean
  return val >= GetRandomReal(0, 1)

public function getRandomAngle() returns angle
  return GetRandomReal(0, 360).asAngleDegrees()

public function vec2.getRandomPos(real range) returns vec2
  return this.polarOffset(getRandomAngle(), GetRandomReal(0, range))

public function onceEvery(real seconds) returns bool
  let interval = (seconds / ANIMATION_PERIOD).toInt()
  return ModuloInteger((currentTime / 3 * 100).toInt(), interval) == 0

public function oneOutOf(int interval) returns bool
  return GetRandomInt(0, interval - 1) == 0

// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< UI         >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>

constant HEIGHT_ICON_RESOURCE = 0.016
constant WIDTH_ICON_RESOURCE = 0.016

constant iconGold = createFrame("BACKDROP", "", GAME_UI, "", 0)
  ..setSize(HEIGHT_ICON_RESOURCE, WIDTH_ICON_RESOURCE)
  ..setPoint(FRAMEPOINT_TOP, GAME_UI, FRAMEPOINT_TOP, 0.07, -0.003)
  ..setVisible(false)
  
constant iconLumber = createFrame("BACKDROP", "", GAME_UI, "", 0)
  ..setSize(HEIGHT_ICON_RESOURCE, WIDTH_ICON_RESOURCE)
  ..setPoint(FRAMEPOINT_TOP, GAME_UI, FRAMEPOINT_TOP, 0.155, -0.003)
  ..setVisible(false)
  
constant iconFood = createFrame("BACKDROP", "", GAME_UI, "", 0)
  ..setSize(HEIGHT_ICON_RESOURCE, WIDTH_ICON_RESOURCE)
  ..setPoint(FRAMEPOINT_TOP, GAME_UI, FRAMEPOINT_TOP, 0.243, -0.003)
  ..setVisible(false)
  
public function setIconGold(string icon)
  iconGold..setTexture(icon, 0, true)..setVisible(true)

public function setIconLumber(string icon)
  iconLumber..setTexture(icon, 0, true)..setVisible(true)

public function setIconFood(string icon)
  iconFood..setTexture(icon, 0, true)..setVisible(true)

// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< CHANNELING >>>>>>>>>> >>>>>>>>>>
// <<<<<<<<<< <<<<<<<<<< ---------- >>>>>>>>>> >>>>>>>>>>

constant channelingUnits = new HashSet<unit>

public function unit.isChanneling() returns boolean
  return channelingUnits.has(this)

init
  EventListener.add(EVENT_PLAYER_UNIT_SPELL_CHANNEL) ->
    channelingUnits.add(GetSpellAbilityUnit())

  EventListener.add(EVENT_PLAYER_UNIT_SPELL_FINISH) ->
    channelingUnits.remove(GetSpellAbilityUnit())
    
  EventListener.add(EVENT_PLAYER_UNIT_SPELL_ENDCAST) ->
    channelingUnits.remove(GetSpellAbilityUnit())


init
  doAfter(0.025) -> 
    for ii = 0 to 23
      let p = players[ii]
      if p.isIngame()
        playersInGame.add(p)

    onPlayerLeave() p ->
      playersInGame.remove(p)